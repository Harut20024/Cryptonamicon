{"ast":null,"code":"export default {\n  props: {\n    tickersName: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      coinSymbols: []\n    };\n  },\n  mounted() {\n    this.fetchCoins();\n  },\n  computed: {\n    filteredCoins() {\n      if (!this.tickersName) return [];\n      return this.coinSymbols.filter(coin => coin.Symbol.toUpperCase().includes(this.tickersName.toUpperCase())).slice(0, 6);\n    }\n  },\n  methods: {\n    async fetchCoins() {\n      try {\n        const response = await fetch(\"https://min-api.cryptocompare.com/data/all/coinlist?summary=true\");\n        const data = await response.json();\n        if (data.Response === \"Success\" && data.Data) {\n          this.coinSymbols = Object.values(data.Data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching coins:\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["props","tickersName","type","String","required","data","coinSymbols","mounted","fetchCoins","computed","filteredCoins","filter","coin","Symbol","toUpperCase","includes","slice","methods","response","fetch","json","Response","Data","Object","values","error","console"],"sources":["/home/harut/Desktop/cryptonomicon/src/componets/FinderCoins.vue"],"sourcesContent":["<template>\n  <div class=\"flex mt-1\">\n    <div v-for=\"coin in filteredCoins\" :key=\"coin.Symbol\" class=\"mr-1\">\n      <button\n      @click=\"emitTickerUpdate(coin.Symbol)\"\n              class=\"my-1 inline-flex items-center py-2 px-4 border border-transparent shadow-sm text-sm leading-4 font-medium rounded-full text-white bg-gray-600 hover:bg-gray-700 transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500\"\n      >\n        {{ coin.Symbol }}\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    tickersName: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      coinSymbols: [],\n    };\n  },\n  mounted() {\n    this.fetchCoins();\n  },\n  computed: {\n    filteredCoins() {\n      if (!this.tickersName) return [];\n      return this.coinSymbols\n        .filter((coin) =>\n          coin.Symbol.toUpperCase().includes(this.tickersName.toUpperCase())\n        )\n        .slice(0, 6);\n    },\n  },\n  methods: {\n    async fetchCoins() {\n      try {\n        const response = await fetch(\n          \"https://min-api.cryptocompare.com/data/all/coinlist?summary=true\"\n        );\n        const data = await response.json();\n        if (data.Response === \"Success\" && data.Data) {\n          this.coinSymbols = Object.values(data.Data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching coins:\", error);\n      }\n    },\n  },\n};\n</script>\n"],"mappings":"AAcA,eAAe;EACbA,KAAK,EAAE;IACLC,WAAW,EAAE;MACXC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,UAAU,CAAC,CAAC;EACnB,CAAC;EACDC,QAAQ,EAAE;IACRC,aAAaA,CAAA,EAAG;MACd,IAAI,CAAC,IAAI,CAACT,WAAW,EAAE,OAAO,EAAE;MAChC,OAAO,IAAI,CAACK,WAAU,CACnBK,MAAM,CAAEC,IAAI,IACXA,IAAI,CAACC,MAAM,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,IAAI,CAACd,WAAW,CAACa,WAAW,CAAC,CAAC,CACnE,EACCE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IAChB;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMT,UAAUA,CAAA,EAAG;MACjB,IAAI;QACF,MAAMU,QAAO,GAAI,MAAMC,KAAK,CAC1B,kEACF,CAAC;QACD,MAAMd,IAAG,GAAI,MAAMa,QAAQ,CAACE,IAAI,CAAC,CAAC;QAClC,IAAIf,IAAI,CAACgB,QAAO,KAAM,SAAQ,IAAKhB,IAAI,CAACiB,IAAI,EAAE;UAC5C,IAAI,CAAChB,WAAU,GAAIiB,MAAM,CAACC,MAAM,CAACnB,IAAI,CAACiB,IAAI,CAAC;QAC7C;MACF,EAAE,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}